{"version":3,"sources":["App.module.css","serviceWorkerRegistration.js","with-auth.jsx","use-field.js","App.jsx","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","message","WrappedComponent","initialValue","useState","value","setValue","useCallback","nextValue","target","getAssociations","database1","word1","database2","word2","associations","word1Associations","word2Associations","Object","entries","forEach","word","weight","push","sort","association1","association2","withAuth","useField","handleWord1Change","handleWord2Change","useDebounce","word1Debounced","word2Debounced","word1Clean","trim","toLowerCase","replace","word2Clean","useMemo","associationsCustom","DATABASE","custom","associationsSociation","sociation","associationsCustomSociation","associationsSociationCustom","className","styles","header","Container","Grid","padded","Row","columns","Column","column","Input","autoFocus","fluid","placeholder","size","onChange","content","length","words","map","association","i","Label","horizontal","key","classNames","wordRed","wordBlue","wordViolet","localStorage","getItem","URLSearchParams","search","ReactDOM","render","document","getElementById","registerMethod","registerString","registerStringPrev","includes","setItem","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d8a57857.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"column\":\"App_column__17gO4\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"wordRed\":\"App_wordRed__eipKT\",\"wordBlue\":\"App_wordBlue__1W-MD\",\"wordViolet\":\"App_wordViolet__2YAQA\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'w8AbBg';\n\nexport default (WrappedComponent) => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return (\n        (window.location.hostname === HOSTNAME || localStorage.getItem('registered') === 'true') &&\n        new URLSearchParams(window.location.search).get('token') === TOKEN\n      );\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback(({ target: { value: nextValue } }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport { Container, Grid, Input, Label } from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport DATABASE from './database.json';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst getAssociations = (database1, word1, database2, word2) => {\n  let associations = [];\n\n  if (word1) {\n    const word1Associations = database1[word1];\n\n    if (word2) {\n      const word2Associations = database2[word2];\n\n      if (word1Associations && word2Associations) {\n        Object.entries(word1Associations).forEach(([word, weight]) => {\n          if (word in word2Associations) {\n            associations.push([word, (weight + word2Associations[word]) / 2]);\n          }\n        });\n      }\n    } else if (word1Associations) {\n      associations = Object.entries(word1Associations);\n    }\n\n    associations.sort((association1, association2) => {\n      if (association1[1] > association2[1]) {\n        return -1;\n      }\n\n      if (association1[1] < association2[1]) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  return associations;\n};\n\nconst App = () => {\n  const [word1, handleWord1Change] = useField('');\n  const [word2, handleWord2Change] = useField('');\n\n  const [word1Debounced] = useDebounce(word1, 500);\n  const [word2Debounced] = useDebounce(word2, 500);\n\n  const word1Clean = word1Debounced.trim().toLowerCase().replace('ё', 'е');\n  const word2Clean = word2Debounced.trim().toLowerCase().replace('ё', 'е');\n\n  const {\n    associationsCustom,\n    associationsSociation,\n    associationsCustomSociation,\n    associationsSociationCustom,\n  } = useMemo(() => {\n    const associationsCustom = getAssociations(\n      DATABASE.custom,\n      word1Clean,\n      DATABASE.custom,\n      word2Clean,\n    );\n\n    const associationsSociation = getAssociations(\n      DATABASE.sociation,\n      word1Clean,\n      DATABASE.sociation,\n      word2Clean,\n    );\n\n    let associationsCustomSociation = [];\n    let associationsSociationCustom = [];\n\n    if (word2Clean) {\n      associationsCustomSociation = getAssociations(\n        DATABASE.custom,\n        word1Clean,\n        DATABASE.sociation,\n        word2Clean,\n      );\n\n      associationsSociationCustom = getAssociations(\n        DATABASE.sociation,\n        word1Clean,\n        DATABASE.custom,\n        word2Clean,\n      );\n    }\n\n    return {\n      associationsCustom,\n      associationsSociation,\n      associationsCustomSociation,\n      associationsSociationCustom,\n    };\n  }, [word1Clean, word2Clean]);\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded>\n            <Grid.Row columns={2}>\n              <Grid.Column className={styles.column}>\n                <Input\n                  autoFocus\n                  fluid\n                  value={word1}\n                  placeholder=\"Слово\"\n                  size=\"big\"\n                  onChange={handleWord1Change}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Input\n                  fluid\n                  value={word2}\n                  placeholder=\"Вместе со словом\"\n                  size=\"big\"\n                  onChange={handleWord2Change}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            {associationsCustom.length > 0 && (\n              <Grid.Row>\n                <div className={styles.words}>\n                  {associationsCustom.map((association, i) => (\n                    <Label\n                      horizontal\n                      key={association[0]}\n                      className={classNames(styles.word, i % 2 || styles.wordRed)}\n                    >\n                      {association[0]}\n                    </Label>\n                  ))}\n                </div>\n              </Grid.Row>\n            )}\n            {associationsSociation.length > 0 && (\n              <Grid.Row>\n                <div className={styles.words}>\n                  {associationsSociation.map((association, i) => (\n                    <Label\n                      horizontal\n                      key={association[0]}\n                      className={classNames(styles.word, i % 2 || styles.wordBlue)}\n                    >\n                      {association[0]}\n                    </Label>\n                  ))}\n                </div>\n              </Grid.Row>\n            )}\n            {associationsCustomSociation.length > 0 && (\n              <Grid.Row>\n                <div className={styles.words}>\n                  {associationsCustomSociation.map((association, i) => (\n                    <Label\n                      horizontal\n                      key={association[0]}\n                      className={classNames(styles.word, i % 2 || styles.wordViolet)}\n                    >\n                      {association[0]}\n                    </Label>\n                  ))}\n                </div>\n              </Grid.Row>\n            )}\n            {associationsSociationCustom.length > 0 && (\n              <Grid.Row>\n                <div className={styles.words}>\n                  {associationsSociationCustom.map((association, i) => (\n                    <Label\n                      horizontal\n                      key={association[0]}\n                      className={classNames(styles.word, i % 2 || styles.wordViolet)}\n                    >\n                      {association[0]}\n                    </Label>\n                  ))}\n                </div>\n              </Grid.Row>\n            )}\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconst registerString = new URLSearchParams(window.location.search).get('register');\nconst registerStringPrev = localStorage.getItem('registered');\n\nlet registerMethod;\nif (['true', 'false'].includes(registerString)) {\n    const register = registerString === 'true';\n    registerMethod = register ? 'register' : 'unregister';\n\n    if (registerString !== registerStringPrev) {\n        localStorage.setItem('registered', register);\n    }\n} else {\n    registerMethod = registerStringPrev === 'true' ? 'register' : 'unregister';\n}\n\nserviceWorkerRegistration[registerMethod]();\n"],"sourceRoot":""}